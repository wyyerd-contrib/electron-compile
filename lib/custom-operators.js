'use strict';

var _Observable = require('rxjs/Observable');

var _async = require('rxjs/scheduler/async');

require('rxjs/add/observable/range');

require('rxjs/add/observable/throw');

require('rxjs/add/observable/timer');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/map');

require('rxjs/add/operator/retryWhen');

require('rxjs/add/operator/switch');

require('rxjs/add/operator/zip');

function retryWithDelayOrError(errors, maxRetries) {
  return _Observable.Observable.range(1, maxRetries + 1).zip(errors, (i, e) => {
    return { attempts: i, error: e };
  }).mergeMap((_ref) => {
    let attempts = _ref.attempts,
        error = _ref.error;

    return attempts <= maxRetries ? _Observable.Observable.timer(attempts * 1000) : _Observable.Observable.throw(error);
  });
}

const newCoolOperators = {
  guaranteedThrottle: function (time) {
    let scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _async.async;

    return this.map(x => _Observable.Observable.timer(time, scheduler).map(() => x)).switch();
  },

  retryAtIntervals: function () {
    let maxRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

    return this.retryWhen(errors => retryWithDelayOrError(errors, maxRetries));
  }
};

for (const key of Object.keys(newCoolOperators)) {
  _Observable.Observable.prototype[key] = newCoolOperators[key];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jdXN0b20tb3BlcmF0b3JzLmpzIl0sIm5hbWVzIjpbInJldHJ5V2l0aERlbGF5T3JFcnJvciIsImVycm9ycyIsIm1heFJldHJpZXMiLCJyYW5nZSIsInppcCIsImkiLCJlIiwiYXR0ZW1wdHMiLCJlcnJvciIsIm1lcmdlTWFwIiwidGltZXIiLCJ0aHJvdyIsIm5ld0Nvb2xPcGVyYXRvcnMiLCJndWFyYW50ZWVkVGhyb3R0bGUiLCJ0aW1lIiwic2NoZWR1bGVyIiwibWFwIiwieCIsInN3aXRjaCIsInJldHJ5QXRJbnRlcnZhbHMiLCJyZXRyeVdoZW4iLCJrZXkiLCJPYmplY3QiLCJrZXlzIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFNBQVNBLHFCQUFULENBQStCQyxNQUEvQixFQUF1Q0MsVUFBdkMsRUFBbUQ7QUFDakQsU0FBTyx1QkFBV0MsS0FBWCxDQUFpQixDQUFqQixFQUFvQkQsYUFBYSxDQUFqQyxFQUNKRSxHQURJLENBQ0FILE1BREEsRUFDUSxDQUFDSSxDQUFELEVBQUlDLENBQUosS0FBVTtBQUNyQixXQUFPLEVBQUVDLFVBQVVGLENBQVosRUFBZUcsT0FBT0YsQ0FBdEIsRUFBUDtBQUNELEdBSEksRUFJSkcsUUFKSSxDQUlLLFVBQXVCO0FBQUEsUUFBckJGLFFBQXFCLFFBQXJCQSxRQUFxQjtBQUFBLFFBQVhDLEtBQVcsUUFBWEEsS0FBVzs7QUFDL0IsV0FBT0QsWUFBWUwsVUFBWixHQUNMLHVCQUFXUSxLQUFYLENBQWlCSCxXQUFXLElBQTVCLENBREssR0FFTCx1QkFBV0ksS0FBWCxDQUFpQkgsS0FBakIsQ0FGRjtBQUdELEdBUkksQ0FBUDtBQVNEOztBQUVELE1BQU1JLG1CQUFtQjtBQUN2QkMsc0JBQW9CLFVBQVNDLElBQVQsRUFBa0M7QUFBQSxRQUFuQkMsU0FBbUI7O0FBQ3BELFdBQU8sS0FDSkMsR0FESSxDQUNDQyxDQUFELElBQU8sdUJBQVdQLEtBQVgsQ0FBaUJJLElBQWpCLEVBQXVCQyxTQUF2QixFQUFrQ0MsR0FBbEMsQ0FBc0MsTUFBTUMsQ0FBNUMsQ0FEUCxFQUVKQyxNQUZJLEVBQVA7QUFHRCxHQUxzQjs7QUFPdkJDLG9CQUFrQixZQUF5QjtBQUFBLFFBQWhCakIsVUFBZ0IsdUVBQUgsQ0FBRzs7QUFDekMsV0FBTyxLQUFLa0IsU0FBTCxDQUFnQm5CLE1BQUQsSUFBWUQsc0JBQXNCQyxNQUF0QixFQUE4QkMsVUFBOUIsQ0FBM0IsQ0FBUDtBQUNEO0FBVHNCLENBQXpCOztBQWFBLEtBQUssTUFBTW1CLEdBQVgsSUFBa0JDLE9BQU9DLElBQVAsQ0FBWVgsZ0JBQVosQ0FBbEIsRUFBaUQ7QUFDL0MseUJBQVdZLFNBQVgsQ0FBcUJILEdBQXJCLElBQTRCVCxpQkFBaUJTLEdBQWpCLENBQTVCO0FBQ0QiLCJmaWxlIjoiY3VzdG9tLW9wZXJhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7YXN5bmN9IGZyb20gJ3J4anMvc2NoZWR1bGVyL2FzeW5jJztcblxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL3JhbmdlJztcbmltcG9ydCAncnhqcy9hZGQvb2JzZXJ2YWJsZS90aHJvdyc7XG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvdGltZXInO1xuXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21lcmdlTWFwJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvcmV0cnlXaGVuJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3Ivc3dpdGNoJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvemlwJztcblxuZnVuY3Rpb24gcmV0cnlXaXRoRGVsYXlPckVycm9yKGVycm9ycywgbWF4UmV0cmllcykge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5yYW5nZSgxLCBtYXhSZXRyaWVzICsgMSlcbiAgICAuemlwKGVycm9ycywgKGksIGUpID0+IHtcbiAgICAgIHJldHVybiB7IGF0dGVtcHRzOiBpLCBlcnJvcjogZSB9O1xuICAgIH0pXG4gICAgLm1lcmdlTWFwKCh7YXR0ZW1wdHMsIGVycm9yfSkgPT4ge1xuICAgICAgcmV0dXJuIGF0dGVtcHRzIDw9IG1heFJldHJpZXMgP1xuICAgICAgICBPYnNlcnZhYmxlLnRpbWVyKGF0dGVtcHRzICogMTAwMCkgOlxuICAgICAgICBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgICB9KTtcbn1cblxuY29uc3QgbmV3Q29vbE9wZXJhdG9ycyA9IHtcbiAgZ3VhcmFudGVlZFRocm90dGxlOiBmdW5jdGlvbih0aW1lLCBzY2hlZHVsZXIgPSBhc3luYykge1xuICAgIHJldHVybiB0aGlzXG4gICAgICAubWFwKCh4KSA9PiBPYnNlcnZhYmxlLnRpbWVyKHRpbWUsIHNjaGVkdWxlcikubWFwKCgpID0+IHgpKVxuICAgICAgLnN3aXRjaCgpO1xuICB9LFxuXG4gIHJldHJ5QXRJbnRlcnZhbHM6IGZ1bmN0aW9uKG1heFJldHJpZXMgPSAzKSB7XG4gICAgcmV0dXJuIHRoaXMucmV0cnlXaGVuKChlcnJvcnMpID0+IHJldHJ5V2l0aERlbGF5T3JFcnJvcihlcnJvcnMsIG1heFJldHJpZXMpKTtcbiAgfSxcbn07XG5cblxuZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobmV3Q29vbE9wZXJhdG9ycykpIHtcbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGVba2V5XSA9IG5ld0Nvb2xPcGVyYXRvcnNba2V5XTtcbn1cbiJdfQ==